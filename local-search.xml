<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Building a YouTube Downloader with FastAPI and yt-dlp</title>
    <link href="/2025/06/07/Building-a-YouTube-Downloader-with-FastAPI/"/>
    <url>/2025/06/07/Building-a-YouTube-Downloader-with-FastAPI/</url>
    
    <content type="html"><![CDATA[<h1 id="Building-a-YouTube-Downloader-with-FastAPI-and-yt-dlp"><a href="#Building-a-YouTube-Downloader-with-FastAPI-and-yt-dlp" class="headerlink" title="Building a YouTube Downloader with FastAPI and yt-dlp"></a>Building a YouTube Downloader with FastAPI and yt-dlp</h1><p>In this comprehensive guide, we&#39;ll build a modern YouTube video downloader using <strong>FastAPI</strong> and <strong>yt-dlp</strong>. Our application will feature a clean web interface, real-time download progress tracking, and robust error handling to deal with YouTube&#39;s evolving anti-scraping measures.</p><h2 id="🎯-What-We-ll-Build"><a href="#🎯-What-We-ll-Build" class="headerlink" title="🎯 What We&#39;ll Build"></a>🎯 What We&#39;ll Build</h2><ul><li><strong>Modern Web Interface</strong>: Clean, responsive UI with Bootstrap</li><li><strong>Real-time Progress Tracking</strong>: Live download progress updates</li><li><strong>Format Selection</strong>: Choose from various video&#x2F;audio quality options</li><li><strong>Task Management</strong>: View, monitor, and manage download tasks</li><li><strong>Error Handling</strong>: Robust handling of YouTube&#39;s restrictions</li><li><strong>File Management</strong>: Secure file serving and downloads</li></ul><h2 id="🛠️-Tech-Stack"><a href="#🛠️-Tech-Stack" class="headerlink" title="🛠️ Tech Stack"></a>🛠️ Tech Stack</h2><ul><li><strong>Backend</strong>: FastAPI (Python)</li><li><strong>Video Processing</strong>: yt-dlp</li><li><strong>Database</strong>: SQLite with SQLAlchemy</li><li><strong>Frontend</strong>: HTML, CSS, JavaScript, Bootstrap</li><li><strong>Real-time Updates</strong>: Polling-based progress tracking</li></ul><h2 id="📋-Prerequisites"><a href="#📋-Prerequisites" class="headerlink" title="📋 Prerequisites"></a>📋 Prerequisites</h2><p>Before we start, make sure you have:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Python 3.8+</span><br>python --version<br><br><span class="hljs-comment"># Required packages</span><br>pip install fastapi uvicorn yt-dlp sqlalchemy python-multipart jinja2<br></code></pre></td></tr></table></figure><h2 id="🏗️-Project-Structure"><a href="#🏗️-Project-Structure" class="headerlink" title="🏗️ Project Structure"></a>🏗️ Project Structure</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nix">yt-dlp-web<span class="hljs-symbol">/</span><br>├── app<span class="hljs-symbol">/</span><br>│   ├── main.py              <span class="hljs-comment"># FastAPI application</span><br>│   ├── models.py            <span class="hljs-comment"># Database models</span><br>│   ├── database.py          <span class="hljs-comment"># Database configuration</span><br>│   └── youtube_downloader.py <span class="hljs-comment"># Core download logic</span><br>├── static<span class="hljs-symbol">/</span><br>│   ├── script.js           <span class="hljs-comment"># Frontend JavaScript</span><br>│   └── style.css           <span class="hljs-comment"># Custom styles</span><br>├── templates<span class="hljs-symbol">/</span><br>│   └── index.html          <span class="hljs-comment"># Main HTML template</span><br>├── downloads<span class="hljs-symbol">/</span>              <span class="hljs-comment"># Downloaded files directory</span><br>└── requirements.txt        <span class="hljs-comment"># Python dependencies</span><br></code></pre></td></tr></table></figure><h2 id="🗄️-Database-Models"><a href="#🗄️-Database-Models" class="headerlink" title="🗄️ Database Models"></a>🗄️ Database Models</h2><p>Let&#39;s start by defining our database models:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app/models.py</span><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, Integer, String, Float, DateTime, Text<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><span class="hljs-keyword">from</span> sqlalchemy.sql <span class="hljs-keyword">import</span> func<br><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum<br><br>Base = declarative_base()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskStatus</span>(<span class="hljs-built_in">str</span>, Enum):<br>    PENDING = <span class="hljs-string">&quot;pending&quot;</span><br>    DOWNLOADING = <span class="hljs-string">&quot;downloading&quot;</span><br>    COMPLETED = <span class="hljs-string">&quot;completed&quot;</span><br>    FAILED = <span class="hljs-string">&quot;failed&quot;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTask</span>(<span class="hljs-title class_ inherited__">Base</span>):<br>    __tablename__ = <span class="hljs-string">&quot;download_tasks&quot;</span><br>    <br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)<br>    url = Column(String, nullable=<span class="hljs-literal">False</span>)<br>    title = Column(String, nullable=<span class="hljs-literal">True</span>)<br>    status = Column(String, default=TaskStatus.PENDING)<br>    progress = Column(Float, default=<span class="hljs-number">0.0</span>)<br>    file_path = Column(String, nullable=<span class="hljs-literal">True</span>)<br>    file_size = Column(Integer, nullable=<span class="hljs-literal">True</span>)<br>    error_message = Column(Text, nullable=<span class="hljs-literal">True</span>)<br>    format_id = Column(String, nullable=<span class="hljs-literal">True</span>)<br>    created_at = Column(DateTime, default=func.now())<br>    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_dict</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">id</span>,<br>            <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-variable language_">self</span>.url,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-variable language_">self</span>.title,<br>            <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-variable language_">self</span>.status,<br>            <span class="hljs-string">&quot;progress&quot;</span>: <span class="hljs-variable language_">self</span>.progress,<br>            <span class="hljs-string">&quot;file_path&quot;</span>: <span class="hljs-variable language_">self</span>.file_path,<br>            <span class="hljs-string">&quot;file_size&quot;</span>: <span class="hljs-variable language_">self</span>.file_size,<br>            <span class="hljs-string">&quot;error_message&quot;</span>: <span class="hljs-variable language_">self</span>.error_message,<br>            <span class="hljs-string">&quot;format_id&quot;</span>: <span class="hljs-variable language_">self</span>.format_id,<br>            <span class="hljs-string">&quot;created_at&quot;</span>: <span class="hljs-variable language_">self</span>.created_at.isoformat() <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.created_at <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;updated_at&quot;</span>: <span class="hljs-variable language_">self</span>.updated_at.isoformat() <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.updated_at <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="🎬-YouTube-Downloader-Core"><a href="#🎬-YouTube-Downloader-Core" class="headerlink" title="🎬 YouTube Downloader Core"></a>🎬 YouTube Downloader Core</h2><p>The heart of our application is the YouTube downloader class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app/youtube_downloader.py</span><br><span class="hljs-keyword">import</span> yt_dlp<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">Any</span>, <span class="hljs-type">Callable</span>, <span class="hljs-type">Optional</span><br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> TaskStatus<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">YouTubeDownloader</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, download_dir: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;./downloads&quot;</span></span>):<br>        <span class="hljs-variable language_">self</span>.download_dir = download_dir<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_video_info</span>(<span class="hljs-params">self, url: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]:<br>        <span class="hljs-string">&quot;&quot;&quot;Extract video information without downloading&quot;&quot;&quot;</span><br>        ydl_opts = &#123;<br>            <span class="hljs-string">&#x27;quiet&#x27;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&#x27;no_warnings&#x27;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&#x27;extract_flat&#x27;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&#x27;extractor_args&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;youtube&#x27;</span>: &#123;<br>                    <span class="hljs-string">&#x27;player_client&#x27;</span>: [<span class="hljs-string">&#x27;tv&#x27;</span>, <span class="hljs-string">&#x27;mweb&#x27;</span>, <span class="hljs-string">&#x27;web&#x27;</span>],<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&#x27;http_headers&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36&#x27;</span><br>            &#125;,<br>            <span class="hljs-string">&#x27;ignoreerrors&#x27;</span>: <span class="hljs-literal">True</span><br>        &#125;<br>        <br>        <span class="hljs-keyword">with</span> yt_dlp.YoutubeDL(ydl_opts) <span class="hljs-keyword">as</span> ydl:<br>            info = ydl.extract_info(url, download=<span class="hljs-literal">False</span>)<br>            <br>            <span class="hljs-comment"># Process and categorize available formats</span><br>            formats = <span class="hljs-variable language_">self</span>._process_formats(info.get(<span class="hljs-string">&#x27;formats&#x27;</span>, []))<br>            <br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-string">&#x27;title&#x27;</span>: info.get(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;Unknown&#x27;</span>),<br>                <span class="hljs-string">&#x27;duration&#x27;</span>: info.get(<span class="hljs-string">&#x27;duration&#x27;</span>, <span class="hljs-number">0</span>),<br>                <span class="hljs-string">&#x27;uploader&#x27;</span>: info.get(<span class="hljs-string">&#x27;uploader&#x27;</span>, <span class="hljs-string">&#x27;Unknown&#x27;</span>),<br>                <span class="hljs-string">&#x27;view_count&#x27;</span>: info.get(<span class="hljs-string">&#x27;view_count&#x27;</span>, <span class="hljs-number">0</span>),<br>                <span class="hljs-string">&#x27;thumbnail&#x27;</span>: info.get(<span class="hljs-string">&#x27;thumbnail&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),<br>                <span class="hljs-string">&#x27;webpage_url&#x27;</span>: info.get(<span class="hljs-string">&#x27;webpage_url&#x27;</span>, url),<br>                <span class="hljs-string">&#x27;formats&#x27;</span>: formats<br>            &#125;<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_video</span>(<span class="hljs-params">self, task_id: <span class="hljs-built_in">int</span>, url: <span class="hljs-built_in">str</span>, format_id: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;best&#x27;</span>, </span><br><span class="hljs-params">                      progress_callback: <span class="hljs-type">Optional</span>[<span class="hljs-type">Callable</span>] = <span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Download video in a separate thread&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_thread</span>():<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># Ensure download directory exists</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-variable language_">self</span>.download_dir):<br>                    os.makedirs(<span class="hljs-variable language_">self</span>.download_dir)<br>                <br>                <span class="hljs-comment"># Configure yt-dlp options</span><br>                ydl_opts = &#123;<br>                    <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-variable language_">self</span>._get_format_selector(format_id),<br>                    <span class="hljs-string">&#x27;outtmpl&#x27;</span>: os.path.join(<span class="hljs-variable language_">self</span>.download_dir, <span class="hljs-string">&quot;%(title)s-%(id)s.%(ext)s&quot;</span>),<br>                    <span class="hljs-string">&#x27;writeinfojson&#x27;</span>: <span class="hljs-literal">True</span>,<br>                    <span class="hljs-string">&#x27;merge_output_format&#x27;</span>: <span class="hljs-string">&#x27;mp4&#x27;</span>,<br>                    <span class="hljs-string">&#x27;prefer_ffmpeg&#x27;</span>: <span class="hljs-literal">True</span>,<br>                    <span class="hljs-string">&#x27;extractor_args&#x27;</span>: &#123;<br>                        <span class="hljs-string">&#x27;youtube&#x27;</span>: &#123;<br>                            <span class="hljs-string">&#x27;player_client&#x27;</span>: [<span class="hljs-string">&#x27;tv&#x27;</span>, <span class="hljs-string">&#x27;mweb&#x27;</span>, <span class="hljs-string">&#x27;web&#x27;</span>],<br>                        &#125;<br>                    &#125;,<br>                    <span class="hljs-string">&#x27;retries&#x27;</span>: <span class="hljs-number">3</span>,<br>                    <span class="hljs-string">&#x27;fragment_retries&#x27;</span>: <span class="hljs-number">3</span>,<br>                    <span class="hljs-string">&#x27;socket_timeout&#x27;</span>: <span class="hljs-number">30</span>,<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span> progress_callback:<br>                    ydl_opts[<span class="hljs-string">&#x27;progress_hooks&#x27;</span>] = [<span class="hljs-variable language_">self</span>._progress_hook(task_id, progress_callback)]<br>                <br>                <span class="hljs-keyword">with</span> yt_dlp.YoutubeDL(ydl_opts) <span class="hljs-keyword">as</span> ydl:<br>                    ydl.download([url])<br>                    <br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">if</span> progress_callback:<br>                    progress_callback(task_id, <span class="hljs-number">0</span>, TaskStatus.FAILED, <span class="hljs-literal">None</span>, <span class="hljs-built_in">str</span>(e))<br>        <br>        thread = threading.Thread(target=download_thread)<br>        thread.daemon = <span class="hljs-literal">True</span><br>        thread.start()<br>        <span class="hljs-keyword">return</span> thread<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_progress_hook</span>(<span class="hljs-params">self, task_id: <span class="hljs-built_in">int</span>, progress_callback: <span class="hljs-type">Callable</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Progress tracking hook for yt-dlp&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params">d</span>):<br>            <span class="hljs-keyword">if</span> d[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;downloading&#x27;</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;total_bytes&#x27;</span> <span class="hljs-keyword">in</span> d:<br>                    progress = (d[<span class="hljs-string">&#x27;downloaded_bytes&#x27;</span>] / d[<span class="hljs-string">&#x27;total_bytes&#x27;</span>]) * <span class="hljs-number">100</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;total_bytes_estimate&#x27;</span> <span class="hljs-keyword">in</span> d:<br>                    progress = (d[<span class="hljs-string">&#x27;downloaded_bytes&#x27;</span>] / d[<span class="hljs-string">&#x27;total_bytes_estimate&#x27;</span>]) * <span class="hljs-number">100</span><br>                <span class="hljs-keyword">else</span>:<br>                    progress = <span class="hljs-number">0</span><br>                <br>                progress_callback(task_id, progress, TaskStatus.DOWNLOADING)<br>                <br>            <span class="hljs-keyword">elif</span> d[<span class="hljs-string">&#x27;status&#x27;</span>] == <span class="hljs-string">&#x27;finished&#x27;</span>:<br>                filename = d.get(<span class="hljs-string">&#x27;filename&#x27;</span>)<br>                <span class="hljs-keyword">if</span> filename:<br>                    progress_callback(task_id, <span class="hljs-number">100.0</span>, TaskStatus.COMPLETED, filename)<br>                <br>        <span class="hljs-keyword">return</span> hook<br></code></pre></td></tr></table></figure><h2 id="🚀-FastAPI-Application"><a href="#🚀-FastAPI-Application" class="headerlink" title="🚀 FastAPI Application"></a>🚀 FastAPI Application</h2><p>Now let&#39;s build our FastAPI application:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app/main.py</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, Depends, HTTPException, Request<br><span class="hljs-keyword">from</span> fastapi.staticfiles <span class="hljs-keyword">import</span> StaticFiles<br><span class="hljs-keyword">from</span> fastapi.responses <span class="hljs-keyword">import</span> HTMLResponse, FileResponse<br><span class="hljs-keyword">from</span> fastapi.templating <span class="hljs-keyword">import</span> Jinja2Templates<br><span class="hljs-keyword">from</span> fastapi.middleware.cors <span class="hljs-keyword">import</span> CORSMiddleware<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> Session<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Optional</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> database <span class="hljs-keyword">import</span> get_db, create_tables, DOWNLOAD_DIR<br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> DownloadTask, TaskStatus<br><span class="hljs-keyword">from</span> youtube_downloader <span class="hljs-keyword">import</span> YouTubeDownloader<br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><br><span class="hljs-comment"># Initialize FastAPI app</span><br>app = FastAPI(title=<span class="hljs-string">&quot;YouTube Downloader&quot;</span>, description=<span class="hljs-string">&quot;Modern YouTube video downloader&quot;</span>)<br><br><span class="hljs-comment"># Add CORS middleware</span><br>app.add_middleware(<br>    CORSMiddleware,<br>    allow_origins=[<span class="hljs-string">&quot;*&quot;</span>],<br>    allow_credentials=<span class="hljs-literal">True</span>,<br>    allow_methods=[<span class="hljs-string">&quot;*&quot;</span>],<br>    allow_headers=[<span class="hljs-string">&quot;*&quot;</span>],<br>)<br><br><span class="hljs-comment"># Initialize components</span><br>downloader = YouTubeDownloader(DOWNLOAD_DIR)<br>templates = Jinja2Templates(directory=<span class="hljs-string">&quot;templates&quot;</span>)<br><br><span class="hljs-comment"># Mount static files</span><br>app.mount(<span class="hljs-string">&quot;/static&quot;</span>, StaticFiles(directory=<span class="hljs-string">&quot;static&quot;</span>), name=<span class="hljs-string">&quot;static&quot;</span>)<br><br><span class="hljs-comment"># Pydantic models for API</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VideoInfoRequest</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    url: <span class="hljs-built_in">str</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadRequest</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    url: <span class="hljs-built_in">str</span><br>    format_id: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-string">&quot;best&quot;</span><br><br><span class="hljs-comment"># Progress callback function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_task_progress</span>(<span class="hljs-params">task_id: <span class="hljs-built_in">int</span>, progress: <span class="hljs-built_in">float</span>, status: TaskStatus, </span><br><span class="hljs-params">                        file_path: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>, error_message: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Update task progress in database&quot;&quot;&quot;</span><br>    db = <span class="hljs-built_in">next</span>(get_db())<br>    <span class="hljs-keyword">try</span>:<br>        task = db.query(DownloadTask).<span class="hljs-built_in">filter</span>(DownloadTask.<span class="hljs-built_in">id</span> == task_id).first()<br>        <span class="hljs-keyword">if</span> task:<br>            task.progress = progress<br>            task.status = status<br>            <span class="hljs-keyword">if</span> file_path:<br>                <span class="hljs-comment"># Handle file path properly</span><br>                <span class="hljs-keyword">if</span> os.path.isabs(file_path):<br>                    task.file_path = os.path.relpath(file_path, DOWNLOAD_DIR)<br>                <span class="hljs-keyword">else</span>:<br>                    task.file_path = file_path<br>                <br>                <span class="hljs-comment"># Get file size</span><br>                full_path = os.path.join(DOWNLOAD_DIR, task.file_path)<br>                <span class="hljs-keyword">if</span> os.path.exists(full_path):<br>                    task.file_size = os.path.getsize(full_path)<br>                    <br>            <span class="hljs-keyword">if</span> error_message:<br>                task.error_message = error_message<br>            db.commit()<br>    <span class="hljs-keyword">finally</span>:<br>        db.close()<br><br><span class="hljs-comment"># API Routes</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span>, response_class=HTMLResponse</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_root</span>(<span class="hljs-params">request: Request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Serve the main page&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> templates.TemplateResponse(<span class="hljs-string">&quot;index.html&quot;</span>, &#123;<span class="hljs-string">&quot;request&quot;</span>: request&#125;)<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/api/video-info&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_video_info</span>(<span class="hljs-params">request: VideoInfoRequest</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Get video information&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        info = downloader.get_video_info(request.url)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;data&quot;</span>: info&#125;<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">400</span>, detail=<span class="hljs-built_in">str</span>(e))<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/api/download&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">start_download</span>(<span class="hljs-params">request: DownloadRequest, db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Start download task&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># Get video info first</span><br>        video_info = downloader.get_video_info(request.url)<br>        <br>        <span class="hljs-comment"># Create task record</span><br>        task = DownloadTask(<br>            url=request.url,<br>            title=video_info.get(<span class="hljs-string">&#x27;title&#x27;</span>),<br>            format_id=request.format_id,<br>            status=TaskStatus.PENDING<br>        )<br>        db.add(task)<br>        db.commit()<br>        db.refresh(task)<br>        <br>        <span class="hljs-comment"># Start download</span><br>        downloader.download_video(<br>            task.<span class="hljs-built_in">id</span>, <br>            request.url, <br>            request.format_id,<br>            update_task_progress<br>        )<br>        <br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;task_id&quot;</span>: task.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Download started&quot;</span>&#125;<br>        <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">400</span>, detail=<span class="hljs-built_in">str</span>(e))<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/api/tasks&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_tasks</span>(<span class="hljs-params">db: Session = Depends(<span class="hljs-params">get_db</span>)</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">dict</span>]:<br>    <span class="hljs-string">&quot;&quot;&quot;Get all download tasks&quot;&quot;&quot;</span><br>    tasks = db.query(DownloadTask).order_by(DownloadTask.created_at.desc()).<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> [task.to_dict() <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks]<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/api/download-file/&#123;task_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">task_id: <span class="hljs-built_in">int</span>, db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Serve downloaded file&quot;&quot;&quot;</span><br>    task = db.query(DownloadTask).<span class="hljs-built_in">filter</span>(DownloadTask.<span class="hljs-built_in">id</span> == task_id).first()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> task <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> task.file_path:<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">404</span>, detail=<span class="hljs-string">&quot;File not found&quot;</span>)<br>    <br>    file_path = os.path.join(DOWNLOAD_DIR, task.file_path)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(file_path):<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">404</span>, detail=<span class="hljs-string">&quot;File not found&quot;</span>)<br>    <br>    <span class="hljs-keyword">return</span> FileResponse(<br>        file_path,<br>        filename=os.path.basename(file_path),<br>        media_type=<span class="hljs-string">&#x27;application/octet-stream&#x27;</span><br>    )<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">import</span> uvicorn<br>    uvicorn.run(<span class="hljs-string">&quot;main:app&quot;</span>, host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">8000</span>, reload=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><h3 id="4-Download-Web-Preview"><a href="#4-Download-Web-Preview" class="headerlink" title="4. Download Web Preview"></a>4. <strong>Download Web Preview</strong></h3><p>When running the script, you should see output like:</p><h4 id="Analyze-video-url"><a href="#Analyze-video-url" class="headerlink" title="Analyze video url"></a>Analyze video url</h4><!-- ![Logo](Building-a-YouTube-Downloader-with-FastAPI/create_new.png) --><img src="/2025/06/07/Building-a-YouTube-Downloader-with-FastAPI/create_new.png" class="" title="create_new"><h4 id="Select-your-preferred-format"><a href="#Select-your-preferred-format" class="headerlink" title="Select your preferred format"></a>Select your preferred format</h4><!-- ![Logo](Building-a-YouTube-Downloader-with-FastAPI/formats.png) --><img src="/2025/06/07/Building-a-YouTube-Downloader-with-FastAPI/formats.png" class="" title="formats"><h4 id="Check-download-progress"><a href="#Check-download-progress" class="headerlink" title="Check download progress"></a>Check download progress</h4><!-- ![Logo](Building-a-YouTube-Downloader-with-FastAPI/download_progress.png) --><img src="/2025/06/07/Building-a-YouTube-Downloader-with-FastAPI/download_progress.png" class="" title="download_progress"><h3 id="5-Performance-Testing"><a href="#5-Performance-Testing" class="headerlink" title="5. Performance Testing"></a>5. <strong>Performance Testing</strong></h3><p>Monitor server performance during downloads:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Check server logs for performance metrics</span><br>INFO:     <span class="hljs-string">&quot;POST /api/video-info HTTP/1.1&quot;</span> 200 OK<br>INFO:     <span class="hljs-string">&quot;POST /api/download HTTP/1.1&quot;</span> 200 OK<br>INFO:     <span class="hljs-string">&quot;GET /api/tasks/1 HTTP/1.1&quot;</span> 200 OK<br>📥 Starting download <span class="hljs-keyword">for</span> task 1<br>🔗 URL: https://www.youtube.com/watch?v=dQw4w9WgXcQ<br>📋 Format: worst<br>📂 Output template: ./downloads/%(title)s-%(<span class="hljs-built_in">id</span>)s.%(ext)s<br>🚀 Starting yt-dlp download...<br>✅ File saved: ./downloads/Rick Astley - Never Gonna Give You Up-dQw4w9WgXcQ.mp4 (Size: 3847291 bytes)<br>✅ Download completed <span class="hljs-keyword">for</span> task 1<br></code></pre></td></tr></table></figure><h2 id="🔮-Future-Enhancements"><a href="#🔮-Future-Enhancements" class="headerlink" title="🔮 Future Enhancements"></a>🔮 Future Enhancements</h2><ul><li><strong>Playlist Support</strong>: Download entire playlists</li><li><strong>User Authentication</strong>: Multi-user support</li><li><strong>Download Scheduling</strong>: Queue and schedule downloads</li><li><strong>Cloud Storage</strong>: Integration with cloud storage services</li><li><strong>Mobile App</strong>: React Native or Flutter mobile app</li><li><strong>Docker Support</strong>: Containerized deployment</li></ul><h2 id="📝-Conclusion"><a href="#📝-Conclusion" class="headerlink" title="📝 Conclusion"></a>📝 Conclusion</h2><p>We&#39;ve built a comprehensive YouTube downloader that combines the power of FastAPI and yt-dlp with a modern web interface. The application handles YouTube&#39;s evolving restrictions gracefully and provides a smooth user experience with real-time progress tracking.</p><p>The modular architecture makes it easy to extend with additional features like playlist support, user authentication, or cloud storage integration. The robust error handling ensures the application remains stable even when facing YouTube&#39;s anti-scraping measures.</p><h2 id="🔗-Resources"><a href="#🔗-Resources" class="headerlink" title="🔗 Resources"></a>🔗 Resources</h2><ul><li><a href="https://github.com/gzthss/fastapi_tutorial.git">This Project Code</a></li><li><a href="https://fastapi.tiangolo.com/">FastAPI Documentation</a></li><li><a href="https://github.com/yt-dlp/yt-dlp">yt-dlp GitHub Repository</a></li><li><a href="https://docs.sqlalchemy.org/">SQLAlchemy Documentation</a></li><li><a href="https://getbootstrap.com/docs/">Bootstrap Documentation</a></li></ul><hr><p><em>Happy coding! 🚀, see you🚀</em> </p>]]></content>
    
    
    <categories>
      
      <category>Web Development</category>
      
      <category>Python</category>
      
      <category>FastAPI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FastAPI</tag>
      
      <tag>Python</tag>
      
      <tag>yt-dlp</tag>
      
      <tag>YouTube</tag>
      
      <tag>Web Development</tag>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Asynchronous Programming in FastAPI What You Need to Know</title>
    <link href="/2025/05/21/Asynchronous-Programming-in-FastAPI-What-You-Need-to-Know/"/>
    <url>/2025/05/21/Asynchronous-Programming-in-FastAPI-What-You-Need-to-Know/</url>
    
    <content type="html"><![CDATA[<h3 id="✅-1-Introduction"><a href="#✅-1-Introduction" class="headerlink" title="✅ 1. Introduction"></a>✅ 1. Introduction</h3><p>FastAPI is one of the fastest-growing Python web frameworks, and one of its standout features is first-class support for asynchronous programming. But what does &quot;async&quot; really mean in practice? When should you use it, and when should you avoid it?</p><p>In this post, we&#39;ll break down the essentials of asynchronous programming in FastAPI. Whether you&#39;re new to async&#x2F;await or wondering how it affects your API performance, this guide will help you understand the concepts and write better, faster web applications.</p><h3 id="✅-2-What-is-Asynchronous-Programming"><a href="#✅-2-What-is-Asynchronous-Programming" class="headerlink" title="✅ 2. What is Asynchronous Programming?"></a>✅ 2. What is Asynchronous Programming?</h3><p>In traditional (synchronous) Python code, each operation happens one after another. If your code needs to wait for something—like a file to load or a network response—it blocks the entire thread until that operation finishes.<br><em><strong>FastAPI Async Request Flow</strong></em></p><!-- ![mermaid_chart](./Asynchronous-Programming-in-FastAPI-What-You-Need-to-Know/mermaid_chart.png) --><img src="/2025/05/21/Asynchronous-Programming-in-FastAPI-What-You-Need-to-Know/mermaid_chart.png" class="" title="mermaid_chart"><p>Asynchronous programming changes that. Instead of waiting, async code <em>suspends</em> execution while it waits and lets other tasks run in the meantime. This is especially useful for I&#x2F;O-bound tasks like:</p><ul><li>Making HTTP requests</li><li>Reading&#x2F;writing files</li><li>Talking to a database</li></ul><p>With Python’s <code>async def</code> and <code>await</code> syntax, you can define coroutines that efficiently handle many I&#x2F;O operations concurrently—without creating new threads or processes.</p><h3 id="✅-3-Async-vs-Sync-in-Python-A-Quick-Primer"><a href="#✅-3-Async-vs-Sync-in-Python-A-Quick-Primer" class="headerlink" title="✅ 3. Async vs Sync in Python: A Quick Primer"></a>✅ 3. Async vs Sync in Python: A Quick Primer</h3><p>Understanding the difference between synchronous and asynchronous code in Python is essential before diving into FastAPI&#39;s async capabilities.</p><p>In synchronous code, everything runs in sequence. If a function takes time (e.g., fetching a webpage), the entire program pauses until that task finishes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    response = requests.get(<span class="hljs-string">&quot;https://httpbin.org/delay/3&quot;</span>)<br>    <span class="hljs-keyword">return</span> response.json()<br><br><span class="hljs-comment"># This call blocks until the response is returned</span><br>data = get_data()<br></code></pre></td></tr></table></figure><p>In contrast, asynchronous code uses async def to define a coroutine, and await to pause the coroutine until a result is ready—without blocking other tasks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> httpx<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;datetime.now()&#125;</span>] get_data start&quot;</span>)<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> httpx.AsyncClient() <span class="hljs-keyword">as</span> client:<br>        response = <span class="hljs-keyword">await</span> client.get(<span class="hljs-string">&quot;https://httpbin.org/delay/3&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;datetime.now()&#125;</span>] get_data end&quot;</span>)<br>        <span class="hljs-keyword">return</span> response.json()<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_task</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;datetime.now()&#125;</span>] quick_task start&quot;</span>)<br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;datetime.now()&#125;</span>] quick_task end&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    task1 = asyncio.create_task(get_data())<br>    task2 = asyncio.create_task(quick_task())<br>    <br>    <span class="hljs-keyword">await</span> asyncio.gather(task1, task2)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    asyncio.run(main())<br></code></pre></td></tr></table></figure><!-- ![async_get_data](./Asynchronous-Programming-in-FastAPI-What-You-Need-to-Know/async_get_data.png) --><img src="/2025/05/21/Asynchronous-Programming-in-FastAPI-What-You-Need-to-Know/async_get_data.png" class="" title="async_get_data"><p>So,You can see that <code>get_data</code> does not block the <code>quick_task</code> function.</p><p><em><strong>The key differences:</strong></em></p><table><thead><tr><th>Feature</th><th>Synchronous (<code>def</code>)</th><th>Asynchronous (<code>async def</code>)</th></tr></thead><tbody><tr><td>Blocking</td><td>Yes</td><td>No (when using <code>await</code>)</td></tr><tr><td>Runs concurrently</td><td>No</td><td>Yes (with event loop)</td></tr><tr><td>Suitable for</td><td>CPU-bound tasks</td><td>I&#x2F;O-bound tasks</td></tr></tbody></table><p><strong>Note: Just writing async def doesn&#39;t make your function run in parallel—you still need to await asynchronous calls inside it.</strong></p><hr><h3 id="✅-4-Why-Async-Matters-in-FastAPI"><a href="#✅-4-Why-Async-Matters-in-FastAPI" class="headerlink" title="✅ 4. Why Async Matters in FastAPI"></a>✅ 4. Why Async Matters in FastAPI</h3><p>FastAPI is built on top of <code>Starlette</code>, which is an ASGI (Asynchronous Server Gateway Interface) framework. This gives FastAPI native support for asynchronous endpoints using Python’s async&#x2F;await syntax.</p><p>This means FastAPI can handle many I&#x2F;O-bound operations—like reading from a database, calling external APIs, or streaming data—<strong>without blocking the main thread</strong>. This leads to higher performance under load, especially in real-time and high-concurrency environments.</p><p>Here&#39;s what an async route looks like in FastAPI:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><span class="hljs-keyword">import</span> httpx<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/quote&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_quote</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> httpx.AsyncClient() <span class="hljs-keyword">as</span> client:<br>        response = <span class="hljs-keyword">await</span> client.get(<span class="hljs-string">&quot;https://httpbin.org/delay/3&quot;</span>)<br>        <span class="hljs-keyword">return</span> response.json()<br></code></pre></td></tr></table></figure><p>Because this endpoint is asynchronous, FastAPI can continue processing other requests while it waits for the API response—improving throughput and responsiveness.</p><p>🧠 <strong>Good to know</strong>: You can still define sync endpoints using normal def, and FastAPI will run them in a thread pool—but async functions are more efficient for I&#x2F;O-bound operations.</p><h3 id="✅-5-Defining-async-endpoints-in-FastAPI"><a href="#✅-5-Defining-async-endpoints-in-FastAPI" class="headerlink" title="✅ 5. Defining async endpoints in FastAPI"></a>✅ 5. Defining async endpoints in FastAPI</h3><p>FastAPI makes it incredibly simple to define asynchronous endpoints. All you need to do is declare your route handler with <code>async def</code>, and use <code>await</code> inside it for any I&#x2F;O-bound operations.</p><p>Here&#39;s a minimal example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/ping&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">ping</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;pong&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>In this example, the <code>/ping</code> route is defined using async def, but since it doesn&#39;t do any real I&#x2F;O, it runs like a normal function. You only gain performance benefits when you use await with async-compatible libraries.</p><p>Let&#39;s compare an async and sync version of the same endpoint<br><strong>Async version (recommended for I&#x2F;O-bound tasks):</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> httpx<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/async-quote&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">async_quote</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> httpx.AsyncClient() <span class="hljs-keyword">as</span> client:<br>        response = <span class="hljs-keyword">await</span> client.get(<span class="hljs-string">&quot;https://httpbin.org/delay/3&quot;</span>)<br>        <span class="hljs-keyword">return</span> response.json()<br><br><span class="hljs-comment"># Sync version (also supported):</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/sync-quote&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sync_quote</span>():<br>    response = requests.get(<span class="hljs-string">&quot;https://httpbin.org/delay/3&quot;</span>)<br>    <span class="hljs-keyword">return</span> response.json()<br><br></code></pre></td></tr></table></figure><p>🔥 FastAPI supports both def and async def endpoints. However, only async def endpoints can fully take advantage of FastAPI&#39;s non-blocking ASGI stack for high concurrency.<br>Internally, FastAPI will run def-based functions in a thread pool (via run_in_threadpool), which adds some overhead and doesn&#39;t scale as well for thousands of concurrent connections.</p><h3 id="✅-6-await-in-action-I-O-bound-examples-with-async-database"><a href="#✅-6-await-in-action-I-O-bound-examples-with-async-database" class="headerlink" title="✅ 6. await in action: I&#x2F;O-bound examples (with async database)"></a>✅ 6. await in action: I&#x2F;O-bound examples (with async database)</h3><p>One of the most common and powerful uses of <code>await</code> in FastAPI is when dealing with I&#x2F;O-bound operations like querying a database. In synchronous code, such operations block the main thread. But with asynchronous drivers, FastAPI can handle many requests concurrently, even if some are waiting for database responses.</p><p>Here&#39;s a practical example using FastAPI with <a href="https://sqlmodel.tiangolo.com/">SQLModel</a> and an async engine powered by SQLAlchemy 1.4+ and <code>asyncpg</code>.</p><p><strong>The code for this article is located in the GitHub repository named 04_fastapi_async.</strong><br><a href="https://github.com/gzthss/fastapi_tutorial.git">https://github.com/gzthss/fastapi_tutorial.git</a></p><h4 id="🔧-Setup-Install-requirements"><a href="#🔧-Setup-Install-requirements" class="headerlink" title="🔧 Setup: Install requirements"></a>🔧 Setup: Install requirements</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install sqlmodel[asyncio] asyncpg<br></code></pre></td></tr></table></figure><p>Let&#39;s walk through a practical example using <strong>SQLModel</strong> (an async-compatible ORM from FastAPI’s creator) and Postgresql.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><br><span class="hljs-keyword">from</span> sqlmodel <span class="hljs-keyword">import</span> SQLModel, Field<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(SQLModel, table=<span class="hljs-literal">True</span>):<br>    <span class="hljs-built_in">id</span>: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = Field(default=<span class="hljs-literal">None</span>, primary_key=<span class="hljs-literal">True</span>)<br>    name: <span class="hljs-built_in">str</span><br>    description: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># database.py</span><br><span class="hljs-keyword">from</span> sqlmodel <span class="hljs-keyword">import</span> SQLModel<br><span class="hljs-keyword">from</span> sqlmodel.ext.asyncio.session <span class="hljs-keyword">import</span> AsyncSession<br><span class="hljs-keyword">from</span> sqlalchemy.ext.asyncio <span class="hljs-keyword">import</span> create_async_engine, async_sessionmaker<br><br>database_url = <span class="hljs-string">&quot;postgresql+asyncpg://postgres:admin123@192.168.1.11:5432/postgres&quot;</span><br><br>engine = create_async_engine(database_url, echo=<span class="hljs-literal">True</span>)<br>async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=<span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_session</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> async_session() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">yield</span> session<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_db</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> engine.begin() <span class="hljs-keyword">as</span> conn:<br>        <span class="hljs-keyword">await</span> conn.run_sync(SQLModel.metadata.create_all)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, HTTPException, Depends<br><span class="hljs-keyword">from</span> sqlmodel <span class="hljs-keyword">import</span> select<br><span class="hljs-keyword">import</span> uvicorn<br><span class="hljs-keyword">from</span> database <span class="hljs-keyword">import</span> init_db, engine, get_session<br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> Item<br><span class="hljs-keyword">from</span> sqlmodel.ext.asyncio.session <span class="hljs-keyword">import</span> AsyncSession<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.on_event(<span class="hljs-params"><span class="hljs-string">&quot;startup&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">startup</span>():<br>    <span class="hljs-keyword">await</span> init_db()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_item</span>(<span class="hljs-params">item_id: <span class="hljs-built_in">int</span>, session: AsyncSession = Depends(<span class="hljs-params">get_session</span>)</span>):<br>    query = select(Item).where(Item.<span class="hljs-built_in">id</span> == item_id)<br>    result = <span class="hljs-keyword">await</span> session.<span class="hljs-built_in">exec</span>(query)<br>    item = result.one_or_none()<br>    <span class="hljs-keyword">if</span> item <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">404</span>, detail=<span class="hljs-string">&quot;Item not found&quot;</span>)<br>    <span class="hljs-keyword">return</span> item<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    uvicorn.run(app, host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p><strong>The image below shows the result of the API call.</strong></p><!-- ![get_item](./Asynchronous-Programming-in-FastAPI-What-You-Need-to-Know/get_items.png) --><img src="/2025/05/21/Asynchronous-Programming-in-FastAPI-What-You-Need-to-Know/get_items.png" class="" title="get_items"><p>💗💗💗I hope this article helps you better understand asynchronous programming in FastAPI and improves your API performance in real-world projects. If you found it helpful, feel free to share it with others!</p>]]></content>
    
    
    
    <tags>
      
      <tag>FastAPI</tag>
      
      <tag>Async</tag>
      
      <tag>httpx</tag>
      
      <tag>asyncio</tag>
      
      <tag>Postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>​JWT Authentication in FastAPI:Securing Your API​</title>
    <link href="/2025/05/14/JWT-Authentication-in-FastAPI-Securing-Your-API/"/>
    <url>/2025/05/14/JWT-Authentication-in-FastAPI-Securing-Your-API/</url>
    
    <content type="html"><![CDATA[<p>(This section is part of Blog Post 2: “Advanced FastAPI: Databases, Auth, and Async”)</p><h3 id="What-is-JWT-and-How-Does-It-Work"><a href="#What-is-JWT-and-How-Does-It-Work" class="headerlink" title="What is JWT and How Does It Work?"></a>What is JWT and How Does It Work?</h3><p>JWT (JSON Web Token) is an open standard (RFC 7519) for securely transmitting information between parties as a JSON object.</p><p>JWT is commonly used for authentication and information exchange. It consists of three parts: Header, Payload, and Signature.</p><ul><li>Header: Specifies the type (JWT) and the signing algorithm (e.g., HS256).</li><li>Payload: Contains the actual data to be transmitted (such as user ID, expiration time, etc.), and can be customized.</li><li>Signature: Created by encrypting the first two parts with a secret key to prevent tampering.</li></ul><p>The advantages of JWT are its simple structure, easy transmission, cross-language support, and stateless user authentication. It is widely used in web application login authentication and API authorization scenarios.</p><h3 id="Integrating-JWT-Authentication-into-Your-FastAPI-Project"><a href="#Integrating-JWT-Authentication-into-Your-FastAPI-Project" class="headerlink" title="Integrating JWT Authentication into Your FastAPI Project"></a>Integrating JWT Authentication into Your FastAPI Project</h3><h4 id="JWT-Authentication-Flow-Sequence-Diagram"><a href="#JWT-Authentication-Flow-Sequence-Diagram" class="headerlink" title="JWT Authentication Flow Sequence Diagram"></a>JWT Authentication Flow Sequence Diagram</h4><img src="/2025/05/14/JWT-Authentication-in-FastAPI-Securing-Your-API/diagrams.svg" class="" title="diagrams"><h5 id="​Step-1-Install-Required-Libraries​"><a href="#​Step-1-Install-Required-Libraries​" class="headerlink" title="​Step 1: Install Required Libraries​"></a>​Step 1: Install Required Libraries​</h5><p>JWT requires cryptographic libraries for token signing and password hashing</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install <span class="hljs-string">&quot;python-jose[cryptography]&quot;</span> <span class="hljs-string">&quot;passlib[bcrypt]&quot;</span><br></code></pre></td></tr></table></figure><p>​<strong>python-jose</strong>: Handles JWT creation&#x2F;validation (supports multiple algorithms like HS256).<br>​<strong>passlib</strong>: Securely hashes passwords using ​bcrypt​ (industry-standard for password storage).</p><h5 id="​Step-2-Implementation-Steps"><a href="#​Step-2-Implementation-Steps" class="headerlink" title="​Step 2: Implementation Steps"></a>​Step 2: Implementation Steps</h5><p><strong>The code for this article is located in the GitHub repository named 03_fastapi_jwt.</strong><br><a href="https://github.com/gzthss/fastapi_tutorial.git">https://github.com/gzthss/fastapi_tutorial.git</a></p><p>For detailed information about the database section, please refer to my other article:<br><a href="https://gzthss.com/2025/05/13/Advanced-FastAPI-Databases-Auth-and-Async/">Advanced FastAPI: Databases…</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">project/<br>├── db/<br>│ └── app.db            <span class="hljs-comment"># sqlite db</span><br>│ └── database.py       <span class="hljs-comment"># Database connection and session management</span><br>│ └── models.py         <span class="hljs-comment"># Database models and table definitions</span><br>│<br>├── routers/  <br>│   └── auth.py         <span class="hljs-comment"># Authentication routes  </span><br>│<br>├── utils/<br>│ └── security.py       <span class="hljs-comment"># JWT/password utilities       </span><br>│ └── schemas.py        <span class="hljs-comment"># Pydantic data models  </span><br>│ └── dependencies.py   <span class="hljs-comment"># Auth dependencies</span><br>│<br>└── main.py             <span class="hljs-comment"># Main app setup  </span><br></code></pre></td></tr></table></figure><p><strong>routers&#x2F;auth.py</strong>​</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Authentication routes and user management   </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> APIRouter, Depends, HTTPException, status<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> Session<br><br><span class="hljs-keyword">from</span> utils.security <span class="hljs-keyword">import</span> get_password_hash, verify_password, create_access_token<br><span class="hljs-keyword">from</span> utils.schemas <span class="hljs-keyword">import</span> UserCreate, TokenResponse<br><span class="hljs-keyword">from</span> utils.dependencies <span class="hljs-keyword">import</span> get_current_user<br><br><span class="hljs-keyword">from</span> db.database <span class="hljs-keyword">import</span> get_db<br><span class="hljs-keyword">from</span> db.models <span class="hljs-keyword">import</span> User<br><br>router = APIRouter(prefix=<span class="hljs-string">&quot;/auth&quot;</span>, tags=[<span class="hljs-string">&quot;Authentication&quot;</span>])<br><br><span class="hljs-meta">@router.post(<span class="hljs-params"><span class="hljs-string">&quot;/register&quot;</span>, status_code=status.HTTP_201_CREATED</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">register_user</span>(<span class="hljs-params">user: UserCreate, db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;User registration endpoint.&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># Check for existing user</span><br>    existing_user = db.query(User).<span class="hljs-built_in">filter</span>(<br>        (User.user_name == user.username) | (User.email == user.email)<br>    ).first()<br>    <span class="hljs-keyword">if</span> existing_user:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_400_BAD_REQUEST,<br>            detail=<span class="hljs-string">&quot;Username or email already registered.&quot;</span><br>        )<br><br>    Hash password &amp; save user<br>    hashed_password = get_password_hash(user.password)<br>    new_user = User(<br>        user_name=user.username,<br>        email=user.email,<br>        hashed_password=hashed_password<br>    )<br>    db.add(new_user)<br>    db.commit()<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;User registered successfully&quot;</span>&#125;<br><br><span class="hljs-meta">@router.post(<span class="hljs-params"><span class="hljs-string">&quot;/token&quot;</span>, response_model=TokenResponse</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">login_for_access_token</span>(<span class="hljs-params">username: <span class="hljs-built_in">str</span>,password: <span class="hljs-built_in">str</span>,db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Login endpoint returning JWT.&quot;&quot;&quot;</span><br>    user = db.query(User).<span class="hljs-built_in">filter</span>(User.user_name == username).first()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> verify_password(password, user.hashed_password):<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_401_UNAUTHORIZED,<br>            detail=<span class="hljs-string">&quot;Incorrect username or password&quot;</span>,<br>            headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>        )<br><br>    <span class="hljs-comment">#Generate JWT</span><br>    access_token = create_access_token(data=&#123;<span class="hljs-string">&quot;sub&quot;</span>: user.user_name&#125;)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;access_token&quot;</span>: access_token, <span class="hljs-string">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>utils&#x2F;schemas.py</strong>​</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># routers/schemas.py</span><br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenData</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;JWT Token payload schema.&quot;&quot;&quot;</span><br>    username: <span class="hljs-built_in">str</span> | <span class="hljs-literal">None</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserCreate</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;User registration request schema.&quot;&quot;&quot;</span><br>    username: <span class="hljs-built_in">str</span><br>    password: <span class="hljs-built_in">str</span><br>    email: <span class="hljs-built_in">str</span><br>    <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenResponse</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Login response schema.&quot;&quot;&quot;</span><br>    access_token: <span class="hljs-built_in">str</span><br>    token_type: <span class="hljs-built_in">str</span><br></code></pre></td></tr></table></figure><p><strong>utils&#x2F;dependencies.py</strong>​ </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># dependencies.py</span><br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> HTTPException, Depends, status<br><span class="hljs-keyword">from</span> fastapi.security <span class="hljs-keyword">import</span> OAuth2PasswordBearer<br><span class="hljs-keyword">from</span> jose <span class="hljs-keyword">import</span> jwt, JWTError<br><br><span class="hljs-keyword">from</span> utils.schemas <span class="hljs-keyword">import</span> TokenData<br><span class="hljs-keyword">from</span> utils.security <span class="hljs-keyword">import</span> decode_token<br><br>oauth2_scheme = OAuth2PasswordBearer(tokenUrl=<span class="hljs-string">&quot;/auth/token&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_current_user</span>(<span class="hljs-params">token: <span class="hljs-built_in">str</span> = Depends(<span class="hljs-params">oauth2_scheme</span>)</span>) -&gt; TokenData:<br>    <span class="hljs-string">&quot;&quot;&quot;Dependency to validate JWT.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        payload = decode_token(token)<br>        username: <span class="hljs-built_in">str</span> = payload.get(<span class="hljs-string">&quot;sub&quot;</span>) <br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> JWTError<br>        <span class="hljs-keyword">return</span> TokenData(username=username)<br>    <span class="hljs-keyword">except</span> JWTError:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_401_UNAUTHORIZED,<br>            detail=<span class="hljs-string">&quot;Could not validate credentials&quot;</span>,<br>            headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>        )<br></code></pre></td></tr></table></figure><p><strong>utils&#x2F;security.py</strong>​  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># security.py is used to create and decode JWT tokens.</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta<br><span class="hljs-keyword">from</span> jose <span class="hljs-keyword">import</span> jwt,JWTError<br><span class="hljs-keyword">from</span> passlib.context <span class="hljs-keyword">import</span> CryptContext<br><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> HTTPException, status<br><br><span class="hljs-comment"># -----------------------------</span><br><span class="hljs-comment"># Password Hashing Config</span><br><span class="hljs-comment"># -----------------------------</span><br><br>pwd_context = CryptContext(schemes=[<span class="hljs-string">&quot;bcrypt&quot;</span>], deprecated=<span class="hljs-string">&quot;auto&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_password</span>(<span class="hljs-params">plain_password: <span class="hljs-built_in">str</span>, hashed_password: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Verify plain password against hash.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> pwd_context.verify(plain_password, hashed_password)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_password_hash</span>(<span class="hljs-params">password: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Generate bcrypt hash from password.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> pwd_context.<span class="hljs-built_in">hash</span>(password)<br><br><span class="hljs-comment"># -----------------------------</span><br><span class="hljs-comment"># JWT Configuration</span><br><span class="hljs-comment"># -----------------------------</span><br><br>SECRET_KEY = <span class="hljs-string">&quot;f072b58f044a20bd1488f6d8d2f002af5715011952d185fa84750421282defba&quot;</span><br>ALGORITHM = <span class="hljs-string">&quot;HS256&quot;</span><br>ACCESS_TOKEN_EXPIRE_MINUTES = <span class="hljs-number">30</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_access_token</span>(<span class="hljs-params">data: <span class="hljs-built_in">dict</span>, expires_delta: timedelta = <span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Generate JWT with expiration.&quot;&quot;&quot;</span><br>    to_encode = data.copy()<br>    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)<br>    to_encode.update(&#123;<span class="hljs-string">&quot;exp&quot;</span>: expire&#125;)  <span class="hljs-comment"># </span><br>    <span class="hljs-keyword">return</span> jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_token</span>(<span class="hljs-params">token: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Validate and decode JWT.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])<br>        <span class="hljs-keyword">return</span> payload<br>    <span class="hljs-keyword">except</span> JWTError:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_401_UNAUTHORIZED,<br>            detail=<span class="hljs-string">&quot;Invalid authentication credentials&quot;</span>,<br>            headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>        )<br></code></pre></td></tr></table></figure><p><strong>&#x2F;main.py</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI, HTTPException, Depends<br><span class="hljs-keyword">from</span> routers <span class="hljs-keyword">import</span> auth<br><span class="hljs-keyword">from</span> utils.dependencies <span class="hljs-keyword">import</span> get_current_user<br><span class="hljs-keyword">from</span> utils.schemas <span class="hljs-keyword">import</span> TokenData<br><span class="hljs-keyword">import</span> uvicorn<br><br>app = FastAPI()<br><br>app.include_router(auth.router)<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/secure-data&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_secure_data</span>(<span class="hljs-params">current_user: TokenData = Depends(<span class="hljs-params">get_current_user</span>)</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Example protected route.&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">f&quot; Hello <span class="hljs-subst">&#123;current_user.username&#125;</span>, this is sensitive data!&quot;</span>,<br>        <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;Authorized&quot;</span><br>    &#125;<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    uvicorn.run(app, host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">8000</span>)<br><br></code></pre></td></tr></table></figure><h5 id="​Step-3-Testing-the-Flow-With-Postman"><a href="#​Step-3-Testing-the-Flow-With-Postman" class="headerlink" title="​Step 3: Testing the Flow With Postman"></a>​Step 3: Testing the Flow With Postman</h5><ul><li>Let’s create a user first.</li></ul><!-- ![Logo](JWT-Authentication-in-FastAPI-Securing-Your-API/creat_user.png) --><img src="/2025/05/14/JWT-Authentication-in-FastAPI-Securing-Your-API/creat_user.png" class="" title="creat_user"><ul><li>Use the user you just created to log in and get token<!-- ![Logo](JWT-Authentication-in-FastAPI-Securing-Your-API/user_login.png) --></li></ul><img src="/2025/05/14/JWT-Authentication-in-FastAPI-Securing-Your-API/user_login.png" class="" title="user_login"><ul><li>Use the token to call the authorized API endpoint.<!-- [Logo](JWT-Authentication-in-FastAPI-Securing-Your-API/use_token.png) --></li></ul><img src="/2025/05/14/JWT-Authentication-in-FastAPI-Securing-Your-API/use_token.png" class="" title="use_token"><p>This is the process of using JWT for authorization and encryption in FastAPI. See you next time!</p>]]></content>
    
    
    
    <tags>
      
      <tag>FastAPI</tag>
      
      <tag>Async</tag>
      
      <tag>SQLAlchemy</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Advanced FastAPI: Databases, Auth, and Async</title>
    <link href="/2025/05/13/Advanced-FastAPI-Databases-Auth-and-Async/"/>
    <url>/2025/05/13/Advanced-FastAPI-Databases-Auth-and-Async/</url>
    
    <content type="html"><![CDATA[<p>FastAPI does not impose any restrictions on database tools,but SQLAlchemy is one of the most powerful ORMs in the python ecosystem. This section will teach you how to configure a database from scratch.</p><h3 id="1-Database-Integration-with-SQLAlchemy"><a href="#1-Database-Integration-with-SQLAlchemy" class="headerlink" title="1.Database Integration with SQLAlchemy"></a>1.Database Integration with SQLAlchemy</h3><h5 id="Step-1-Install-Dependencies"><a href="#Step-1-Install-Dependencies" class="headerlink" title="Step 1: Install Dependencies"></a>Step 1: Install Dependencies</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install sqlalchemy<br></code></pre></td></tr></table></figure><h5 id="Step-2-Define-Data-Models"><a href="#Step-2-Define-Data-Models" class="headerlink" title="Step 2: Define Data Models"></a>Step 2: Define Data Models</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> Column, Integer, String<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><br>Base = declarative_base()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">Base</span>):<br>    __tablename__ = <span class="hljs-string">&quot;users&quot;</span><br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)<br>    username = Column(String(<span class="hljs-number">50</span>), unique=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)  <br>    email = Column(String(<span class="hljs-number">100</span>), unique=<span class="hljs-literal">True</span>)                <br>    hashed_password = Column(String(<span class="hljs-number">200</span>))  <br></code></pre></td></tr></table></figure><p>declarative_base(): Creates a base class for models, similar to Django’s models.Model<br>Column: Defines a table field, such as Integer, String, etc.</p><h5 id="Step-3-Initialize-Database-Session"><a href="#Step-3-Initialize-Database-Session" class="headerlink" title="Step 3: Initialize Database Session"></a>Step 3: Initialize Database Session</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># database.py</span><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><br>SQLALCHEMY_DATABASE_URL = <span class="hljs-string">&quot;sqlite:///./app.db&quot;</span><br>engine = create_engine(SQLALCHEMY_DATABASE_URL)<br>SessionLocal = sessionmaker(autocommit=<span class="hljs-literal">False</span>, autoflush=<span class="hljs-literal">False</span>, bind=engine)<br><br></code></pre></td></tr></table></figure><h5 id="Step-4-User-Creation-and-Database-Operations-with-FastAPI"><a href="#Step-4-User-Creation-and-Database-Operations-with-FastAPI" class="headerlink" title="Step 4: User Creation and Database Operations with FastAPI"></a>Step 4: User Creation and Database Operations with FastAPI</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><br><span class="hljs-comment"># Connect to SQLite (use PostgreSQL ofrom fastapi import FastAPI, Depends,HTTPException,status</span><br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> Session<br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> text<br><br><span class="hljs-keyword">from</span> database <span class="hljs-keyword">import</span> engine, SessionLocal<br><span class="hljs-keyword">from</span> models <span class="hljs-keyword">import</span> Base, User<br><span class="hljs-keyword">import</span> hashlib<br><br>app = FastAPI()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserCreateRequest</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    username: <span class="hljs-built_in">str</span><br>    password: <span class="hljs-built_in">str</span><br>    email: <span class="hljs-built_in">str</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_db</span>():<br>    db = SessionLocal()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> db<br>    <span class="hljs-keyword">finally</span>:<br>        db.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_password_hash</span>(<span class="hljs-params">password: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> hashlib.sha256(password.encode()).hexdigest() <br><br><span class="hljs-meta">@app.on_event(<span class="hljs-params"><span class="hljs-string">&quot;startup&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">startup</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Starting up...&quot;</span>)<br>    <span class="hljs-keyword">with</span> engine.begin() <span class="hljs-keyword">as</span> conn:<br>        table_exists = conn.execute(<br>            text(<span class="hljs-string">&quot;SELECT name FROM sqlite_master WHERE type=&#x27;table&#x27; AND name=&#x27;users&#x27;&quot;</span>)<br>        )<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> table_exists.scalar():<br>            Base.metadata.create_all(bind=engine)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Database tables created.&quot;</span>)<br>            <br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/users&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_users</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">int</span>, db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    user = db.query(User).<span class="hljs-built_in">filter</span>(User.<span class="hljs-built_in">id</span> == user_id).first()<br>    <span class="hljs-keyword">return</span> user<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/add_users/&quot;</span>, status_code=status.HTTP_201_CREATED</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_user</span>(<span class="hljs-params">user_data: UserCreateRequest,db: Session = Depends(<span class="hljs-params">get_db</span>)  </span><br><span class="hljs-params"></span>):<br>    <br>    existing_user = db.query(User).<span class="hljs-built_in">filter</span>(User.user_name == user_data.username).first()<br>    <span class="hljs-keyword">if</span> existing_user:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_400_BAD_REQUEST,<br>            detail=<span class="hljs-string">&quot;Username already registered.&quot;</span><br>        )<br><br>    hashed_password = get_password_hash(user_data.password)<br>    new_user = User(<br>        user_name=user_data.username,<br>        email=user_data.email,<br>        hashed_password=hashed_password<br>    )<br><br>    db.add(new_user)<br>    db.commit()<br>    db.refresh(new_user)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;User created successfully&quot;</span>, <span class="hljs-string">&quot;user_id&quot;</span>: new_user.<span class="hljs-built_in">id</span>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="Step-5-Run-the-application-with-uvicorn"><a href="#Step-5-Run-the-application-with-uvicorn" class="headerlink" title="Step 5: Run the application with uvicorn"></a>Step 5: Run the application with uvicorn</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">uvicorn main:app --reload<br></code></pre></td></tr></table></figure><!-- ![Logo](Advanced-FastAPI-Databases-Auth-and-Async/run_app.png) --><img src="/2025/05/13/Advanced-FastAPI-Databases-Auth-and-Async/run_app.png" class="" title="APP"><h5 id="Step-6-Use-Postman-for-API-testing"><a href="#Step-6-Use-Postman-for-API-testing" class="headerlink" title="Step 6: Use Postman for API testing."></a>Step 6: Use Postman for API testing.</h5><ul><li>Use Postman to call the add_users endpoint to add a user</li></ul>  <!-- ![Logo](Advanced-FastAPI-Databases-Auth-and-Async/postman.png) --><img src="/2025/05/13/Advanced-FastAPI-Databases-Auth-and-Async/postman.png" class="" title="Postman"><ul><li>Use Postman to call the users endpoint to view user information from the database<!-- ![Logo](Advanced-FastAPI-Databases-Auth-and-Async/postman_get.png) --></li></ul><img src="/2025/05/13/Advanced-FastAPI-Databases-Auth-and-Async/postman_get.png" class="" title="Postman_Get"><p>In summary, mastering FastAPI&#96;s advanced features—such as database integration, authentication, and asynchronous programming—empowers you to build robust, secure, and high-performance web APIs with ease.</p>]]></content>
    
    
    
    <tags>
      
      <tag>FastAPI</tag>
      
      <tag>Async</tag>
      
      <tag>SQLAlchemy</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Building a FastAPI RESTful API from Scratch</title>
    <link href="/2025/05/12/Building-a-FastAPI-RESTful-API-from-Scratch/"/>
    <url>/2025/05/12/Building-a-FastAPI-RESTful-API-from-Scratch/</url>
    
    <content type="html"><![CDATA[<!-- ![Logo](./Building-a-FastAPI-RESTful-API-from-Scratch/title.png) --><img src="/2025/05/12/Building-a-FastAPI-RESTful-API-from-Scratch/title.png" class="" title="Title"><h3 id="1-​Introduction-to-FastAPI​"><a href="#1-​Introduction-to-FastAPI​" class="headerlink" title="1.​Introduction to FastAPI​"></a>1.​Introduction to FastAPI​</h3><p>Why FastAPI?</p><ul><li><p>High Performance:<br> FastAPI is built on Starlette and Pydantic, supports async features, and its performance is close to Node.js and Go, far surpassing traditional frameworks like Flask and Django.</p></li><li><p>Asynchronous Support:<br>Native support for async&#x2F;await, suitable for high-concurrency scenarios.</p></li><li><p>Automatic Documentation:<br>With simple annotations, FastAPI automatically generates interactive API docs (Swagger UI and ReDoc), making development and testing much easier.</p></li></ul><h3 id="2-​Project-Setup"><a href="#2-​Project-Setup" class="headerlink" title="2.​Project Setup"></a>2.​Project Setup</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install fastapi uvicorn<br></code></pre></td></tr></table></figure><h3 id="3-​Creating-Your-First-API​"><a href="#3-​Creating-Your-First-API​" class="headerlink" title="3.​Creating Your First API​"></a>3.​Creating Your First API​</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-​​Adding-Routes-and-Pydantic-Models"><a href="#4-​​Adding-Routes-and-Pydantic-Models" class="headerlink" title="4.​​Adding Routes and Pydantic Models"></a>4.​​Adding Routes and Pydantic Models</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name: <span class="hljs-built_in">str</span><br>    price: <span class="hljs-built_in">float</span><br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_item</span>(<span class="hljs-params">item: Item</span>):<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;item&quot;</span>: item&#125;<br></code></pre></td></tr></table></figure><h3 id="5-A-Simple-FastAPI-Application-Example"><a href="#5-A-Simple-FastAPI-Application-Example" class="headerlink" title="5.A Simple FastAPI Application Example"></a>5.A Simple FastAPI Application Example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><span class="hljs-keyword">import</span> uvicorn<br>app = FastAPI()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name: <span class="hljs-built_in">str</span><br>    price: <span class="hljs-built_in">float</span><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>&#125;<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_item</span>(<span class="hljs-params">item: Item</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;item.name&#125;</span> <span class="hljs-subst">&#123;item.price&#125;</span>&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    uvicorn.run(app, host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>The following image shows the interactive API documentation (Swagger UI) automatically generated by FastAPI, where developers can directly test the endpoints.</p><!-- ![Logo](./Building-a-FastAPI-RESTful-API-from-Scratch/doc.png) --><img src="/2025/05/12/Building-a-FastAPI-RESTful-API-from-Scratch/doc.png" class="" title="Doc">]]></content>
    
    
    
    <tags>
      
      <tag>FastAPI</tag>
      
      <tag>Python</tag>
      
      <tag>Backend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>​Step-by-Step Guide to Installing Python 3.10+ on CentOS 7</title>
    <link href="/2025/05/10/%E2%80%8BStep-by-Step-Guide-to-Installing-Python-3-10-on-CentOS-7/"/>
    <url>/2025/05/10/%E2%80%8BStep-by-Step-Guide-to-Installing-Python-3-10-on-CentOS-7/</url>
    
    <content type="html"><![CDATA[<p>​Objective: Install Python 3.10 or later on CentOS 7 while preserving the system-default Python 2.7 environment.</p><h3 id="​Step-1-Install-Required-Dependencies"><a href="#​Step-1-Install-Required-Dependencies" class="headerlink" title="​Step 1: Install Required Dependencies"></a>​Step 1: Install Required Dependencies</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum groupinstall -y <span class="hljs-string">&quot;Development Tools&quot;</span><br><span class="hljs-built_in">sudo</span> yum install -y openssl-devel bzip2-devel libffi-devel zlib-devel ncurses-devel sqlite-devel readline-devel tk-devel<br></code></pre></td></tr></table></figure><h3 id="Step-2-Download-Python-3-10-Source-Code"><a href="#Step-2-Download-Python-3-10-Source-Code" class="headerlink" title="Step 2: Download Python 3.10 Source Code"></a>Step 2: Download Python 3.10 Source Code</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz<br></code></pre></td></tr></table></figure><h3 id="Step-3-Extract-and-Configure-the-Source-Code"><a href="#Step-3-Extract-and-Configure-the-Source-Code" class="headerlink" title="Step 3: Extract and Configure the Source Code"></a>Step 3: Extract and Configure the Source Code</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar xzf Python-3.10.0.tgz<br><span class="hljs-built_in">cd</span> Python-3.10.0<br></code></pre></td></tr></table></figure><p>Configure the build with optimizations and a custom installation path:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --enable-optimizations --prefix=/usr/local<br></code></pre></td></tr></table></figure><p>.&#x2F;configure –enable-optimizations –prefix&#x3D;&#x2F;usr&#x2F;local</p><h3 id="Step-4-Compile-and-Install-Python"><a href="#Step-4-Compile-and-Install-Python" class="headerlink" title="Step 4: Compile and Install Python"></a>Step 4: Compile and Install Python</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> make altinstall<br></code></pre></td></tr></table></figure><h3 id="Step-5-Verify-Installation"><a href="#Step-5-Verify-Installation" class="headerlink" title="Step 5: Verify Installation"></a>Step 5: Verify Installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3.10 --version<br></code></pre></td></tr></table></figure><p>Expected output: Python 3.10.0</p><h3 id="Step-6-Create-a-python3-Soft-Link-Optional-​"><a href="#Step-6-Create-a-python3-Soft-Link-Optional-​" class="headerlink" title="Step 6: Create a python3 Soft Link (Optional)​"></a>Step 6: Create a python3 Soft Link (Optional)​</h3><p>If you want to use python3 as a shortcut for python3.10, follow these steps:</p><h5 id="1-Check-the-Python-3-10-Installation-Path"><a href="#1-Check-the-Python-3-10-Installation-Path" class="headerlink" title="1. Check the Python 3.10 Installation Path"></a>1. Check the Python 3.10 Installation Path</h5><p>   By default, Python 3.10 is installed to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3.10. Verify this:<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /usr/local/bin/python3.10<br></code></pre></td></tr></table></figure></p><h5 id="​2-Create-a-Soft-Link"><a href="#​2-Create-a-Soft-Link" class="headerlink" title="​2. Create a Soft Link"></a>​2. Create a Soft Link</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /usr/local/bin/python3.10 /usr/bin/python3<br></code></pre></td></tr></table></figure><h5 id="3-Verify-the-Link​"><a href="#3-Verify-the-Link​" class="headerlink" title="3. Verify the Link​"></a>3. Verify the Link​</h5><p>Check the new symlink and version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /usr/bin/python3  <span class="hljs-comment"># Should point to /usr/local/bin/python3.10</span><br>python3 --version       <span class="hljs-comment"># Should show &quot;Python 3.10.x&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
